1604978386885:(defn tt [] (try\n     (/ 1 0)\n     (catch Exception e (str "caught exception: " (.getMessage e)))))
1604978387986:tt
1604978394142:(tt)
1604978430339:(defn tt [] (try\n     (/ 1 0)\n     (catch Exception e nil)))
1604978432739:(tt)
1604978564159:(filter even? [1 nil 2])
1604978572121:(filter some [1 nil 2])
1604978599433:(filter some? [1 nil 2])
1607317499571:(dev)
1607317748687:(go)
1607318103876:(slurp (io/resource "full.json"))
1607318152058:(slurp (io/resource "data/full.json"))
1607318183659:(ns items.json-record)
1607318193957:(def tt (slurp (io/resource "data/full.json")))
1607318214289:(def tt (slurp (clojure.java.io/resource "data/full.json")))
1607318215793:tt
1607318221545:(parse-string tt)
1607318227491:(keys (parse-string tt))
1607318280280:(keys (parse-string tt) true)
1607318287912:(parse-string tt true)
1607318298193:(keys (parse-string tt true))
1607318621413:(json->record "reources/data/full.json")
1607318746105:json-interceptors
1607318806632:(def tt (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607318818993:(tt "reources/data/full.json")
1607318875184:(tt "/home/shun/dev/items/resources/data/full.json")
1607319043887:(tt (clojure.java.io "reources/data/full.json"))
1607319053134:(tt (clojure.java.io/io "reources/data/full.json"))
1607319084270:(reset)
1607319088462:(ns dev)
1607319090918:(reset)
1607319109494:(ns items.json-record)
1607319131221:((io "reources/data/full.json")\n )
1607319149053:(io /file "reources/data/full.json")
1607319159932:(io/file "reources/data/full.json")
1607319292683:(ns  dev)
1607319294716:(reset)
1607319304532:(ns items.json-record)
1607319315547:(fs/file "reources/data/full.json")
1607319347074:(def tt (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607319357228:(tt (fs/file "reources/data/full.json"))
1607319374291:(fs/file "reources/data/full.json")
1607319402186:(tt (fs/file "/home/shun/dev/items/resources/data/full.json"))
1607319425235:(keys (tt (fs/file "/home/shun/dev/items/resources/data/full.json")))
1607319465241:(def t1 (tt (fs/file "/home/shun/dev/items/resources/data/full.json")))
1607319466296:t1
1607320287456:(keys t1)
1607320880184:(ns dev)
1607320882657:(reset)
1607320927616:(ns items.json-spec)
1607321044407:(fs/list-dir ".")
1607321064671:(ns items.json-record)
1607321066518:(fs/list-dir ".")
1607321106590:(def ff (fs/file "./resources/data/full.json")))
1607321108774:(def ff (fs/file "./resources/data/full.json"))
1607321111133:ff
1607321115678:(slurp ff)
1607321144873:(def f1 (fn [ctx]\n             (let [error (:error ctx)\n                   data (ex-data error)]\n               (log :error ::json-interceptors data)\n               (-> ctx\n                   (dissoc :error)\n                   (assoc :response nil)))))
1607321151893:(f1 ff)
1607321159925:f1
1607321173294:(f1 ff)
1607321199539:(def f1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607321203364:(f1 ff)
1607321214238:(def t1 (f1 ff))
1607321228148:(def f2 (fn [j-map]\n                       (if (s/valid? ::spec/json-log j-map)\n                         j-map\n                         (log :error ::json-file-parsed-invalid (s/explain-data ::spec/json-log j-map)))))
1607321232700:(f2 t1)
1607321273156:(def t2 (f2 t1))
1607321275996:(keys t2)
1607321310529:(def f3 #(update % :勤務單位 utils/remove-space))
1607321315492:(f3 t2)
1607321321180:(def t3 (f3 t2))
1607321322675:t3
1607321334878:(def f4 #(assoc % :查獲時間 (make-carry-time %)))
1607321338652:(f4 t3)
1607321353579:(def t4 (f4 t3))
1607321411058:(def f5 bug-unit-transform)
1607321416418:(f5 t4)
1607321422643:(def t5 (f5 t4))
1607321435059:(def f6 keys-transform)
1607321439569:(f6 t5)
1607321444450:(keys (f6 t5))
1607322192809:(ns dev)
1607322195905:(halt)
1607322233426:(dev)
1607322237018:(go)
1607322473575:(reset)
1607322480960:(def transform-fn (fn [m entry]\n                       (let [k (key entry)\n                             v (val entry)]\n                         (sp/select [sp/MAP-KEYS #(= k %)] m)))\n  )
1607322507033:(def tt {:1 1 :2 2 :3 3 :4 4})
1607322532038:(def t1 {:1 :t1 :3 :t2})
1607322550622:(transform-fn tt (first t1))
1607322563693:(transform-fn tt (last t1))
1607322591302:(def transform-fn (fn [m entry]\n                       (let [k (key entry)\n                             v (val entry)]\n                         (sp/setval [sp/MAP-KEYS #(= k %)] v m))))
1607322595901:(transform-fn tt (last t1))
1607322607949:(transform-fn tt (first t1))
1607322746116:(reset)
1607322799131:(def ff (fs/file "./resources/data/full.json"))
1607322800620:ff
1607322824329:(def f1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607322848651:(ns items.json-record)
1607322852582:(def f1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607322858838:(f1 ff)
1607322882106:(def ff (fs/file "./resources/data/full.json"))
1607322883546:ff
1607322893322:(f1 ff)
1607322900971:(def t1 (f1 ff))
1607322902242:t1
1607322911474:(keys t1)
1607322962185:(keys-transform t1)
1607322967042:(keys (keys-transform t1))
1607323007865:(keys-transform t1)
1607323032249:(def xx (keys-transform t1))
1607323037952:(count xx)
1607323041401:(first xx)
1607323050529:(last xx)
1607323757761:(ns dev)
1607323759832:(reset)
1607323773208:(ns items.json-record)
1607323785112:(def ff (fs/file "./resources/data/full.json"))
1607323802362:(def t1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607323804928:(t1 ff)
1607323814720:(def x1 (t1 ff))
1607323835960:(keys-transform x1)
1607323845936:(keys (keys-transform x1))
1607323896391:(keys-transform x1)
1607323922702:(t1 ff)
1607323929359:(keys (t1 ff))
1607323958927:(def x1 (t1 ff)))
1607323961173:(def x1 (t1 ff))
1607323962637:x1
1607323998254:(keys-transform x1)
1607324038781:(ns dev)
1607324041229:(reset)
1607324051413:(ns items.json-record)
1607324073533:(def ff (fs/file "./resources/data/full.json"))
1607324089817:(def f1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607324094756:(f1 ff)
1607324108460:(keys-transform (f1 ff))
1607324129157:(keys (keys-transform (f1 ff)))
1607324249235:(ns dev)
1607324251059:(reset)
1607324408881:(ns items.json-record)
1607324425601:(def ff (fs/file "./resources/data/full.json"))
1607324462585:(json->record ff)
1607324996105:(def f1 (fn [file]\n                       (let [json-str (slurp file)\n                             ftime (utils/file-time file)]\n                         (reset! last-file-time* (jt/max ftime @last-file-time*))\n                         (assoc (parse-string json-str true) :原始檔 (.getName file)\n                                                             :檔案時間 ftime))))
1607325002146:(f1 ff)
1607325008944:(keys (f1 ff))
1607325018763:(:旅客護照號碼/身分證號 (f1 ff))
1607325041810:(keys-transform (f1 ff))
1607325048147:(def x1 (keys-transform (f1 ff)))
1607325066010:(:旅客證號 x1)
1607325297424:(ns dev)
1607325299543:(reset)
1607325335039:(def ff (fs/file "./resources/data/full.json"))
1607325360454:(record/json->record ff)
1607325734754:(def ff (fs/file "./resources/data/old.json"))
1607325738473:(record/json->record ff)
1607325815162:(ns dev)
1607325817145:(reset)
1607325984768:(generate-detail-csv (local-date 2020 12 7))
1607326157597:(halt)
